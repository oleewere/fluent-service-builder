#!/bin/sh
### BEGIN INIT INFO
# Provides:          {{ templateVars["project_name"] }}
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: data collector for {{ templateVars["company"] }}
# Description:       {{ templateVars["project_name"] }} is a data collector
### END INIT INFO
# pidfile:           {{ os.path.join("/var", "run",templateVars["project_name"], templateVars["project_name"] + ".pid") }}
# chkconfig: 2345 90 10

export PATH="/sbin:/usr/sbin:/bin:/usr/bin"

{{ templateVars["project_var_prefix"] }}_NAME="{{ templateVars["project_name"] }}"
{{ templateVars["project_var_prefix"] }}_HOME="{{ templateVars["install_path"] }}"
{{ templateVars["project_var_prefix"] }}_DEFAULT="{{ os.path.join("/etc", "sysconfig", templateVars["project_name"]) }}"
{{ templateVars["project_var_prefix"] }}_USER="{{ templateVars["project_user"] }}"
{{ templateVars["project_var_prefix"] }}_GROUP="{{ templateVars["project_group"] }}"
{{ templateVars["project_var_prefix"] }}_RUBY="{{ os.path.join(templateVars["install_path"], "bin", "ruby") }}"
{{ templateVars["project_var_prefix"] }}_BIN_FILE="{{ os.path.join("/usr", "sbin", templateVars["project_name"]) }}"
{{ templateVars["project_var_prefix"] }}_LOG_FILE="{{ os.path.join("/var", "log", templateVars["project_name"], templateVars["project_name"] + ".log") }}"
{{ templateVars["project_var_prefix"] }}_PID_FILE="{{ os.path.join("/var", "run", templateVars["project_name"], templateVars["project_name"] + ".pid") }}"
{{ templateVars["project_var_prefix"] }}_LOCK_FILE="{{ os.path.join("/var", "lock", "subsys", templateVars["project_name"]) }}"
{{ templateVars["project_var_prefix"] }}_OPTIONS="--use-v1-config"

# timeout can be overridden from {{ os.path.join("/etc", "sysconfig", templateVars["project_name"]) }}
STOPTIMEOUT=120

# Read configuration variable file if it is present
if [ -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT}" ]; then
  . "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT}"
fi

if [ -n "${name}" ]; then
  # backward compatibility with omnibus-td-agent <= 2.2.0. will be deleted from future release.
  echo "Warning: Declaring \$name in {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT} has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_NAME instead." 1>&2
  {{ templateVars["project_var_prefix"] }}_NAME="${name}"
fi

if [ -n "${prog}" ]; then
  # backward compatibility with omnibus-td-agent <= 2.2.0. will be deleted from future release.
  echo "Warning: Declaring \$prog in {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT} for customizing \$PIDFILE has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_PID_FILE instead." 1>&2
  if [ -z "${PIDFILE}" ]; then
    {{ templateVars["project_var_prefix"] }}_PID_FILE="/var/run/{{ templateVars["project_name"] }}/${prog}.pid"
  fi
  {{ templateVars["project_var_prefix"] }}_LOCK_FILE="/var/lock/subsys/${prog}"
  {{ templateVars["project_var_prefix"] }}_PROG_NAME="${prog}"
else
  unset {{ templateVars["project_var_prefix"] }}_PROG_NAME
fi

if [ -n "${process_bin}" ]; then
  # backward compatibility with omnibus-td-agent <= 2.2.0. will be deleted from future release.
  echo "Warning: Declaring \$process_bin in {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT} has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_RUBY instead." 1>&2
  {{ templateVars["project_var_prefix"] }}_RUBY="${process_bin}"
fi

if [ -n "${PIDFILE}" ]; then
  echo "Warning: Declaring \$PIDFILE in {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT} has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_PIDFILE instead." 1>&2
  {{ templateVars["project_var_prefix"] }}_PID_FILE="${PIDFILE}"
fi

if [ -n "${DAEMON_ARGS}" ]; then
# TODO: Show warning on use of `DAEMON_ARGS`
# echo "Warning: Declaring \$DAEMON_ARGS in {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_DEFAULT} has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_OPTIONS instead." 1>&2
  START_STOP_DAEMON_ARGS=""
  parse_daemon_args() {
    while [ -n "$1" ]; do
      case "$1" in
      "--user="?* )
        echo "Warning: Declaring --user in \$DAEMON_ARGS has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_USER instead." 1>&2
        {{ templateVars["project_var_prefix"] }}_USER="${1#*=}"
        ;;
      "--user" )
        echo "Warning: Declaring --user in \$DAEMON_ARGS has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_USER instead." 1>&2
        shift 1
        {{ templateVars["project_var_prefix"] }}_USER="$1"
        ;;
      * )
        START_STOP_DAEMON_ARGS="${START_STOP_DAEMON_ARGS} $1"
        ;;
      esac
      shift 1
    done
  }
  parse_daemon_args ${DAEMON_ARGS}
fi

if [ -n "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS}" ]; then
  ORIG_{{ templateVars["project_var_prefix"] }}_ARGS="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS}"
  {{ templateVars["project_var_prefix"] }}_ARGS=""
  parse_{{ templateVars["project_var_prefix"].lower() }}_args() {
    while [ -n "$1" ]; do
      case "$1" in
      "--group="?* )
        echo "Warning: Declaring --group in \${{ templateVars["project_var_prefix"] }}_ARGS has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_GROUP instead." 1>&2
        {{ templateVars["project_var_prefix"] }}_GROUP="${1#*=}"
        ;;
      "--group" )
        echo "Warning: Declaring --group in \${{ templateVars["project_var_prefix"] }}_ARGS has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_GROUP instead." 1>&2
        shift 1
        {{ templateVars["project_var_prefix"] }}_GROUP="$1"
        ;;
      "--user="?* )
        echo "Warning: Declaring --user in \${{ templateVars["project_var_prefix"] }}_ARGS has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_USER instead." 1>&2
        {{ templateVars["project_var_prefix"] }}_USER="${1#*=}"
        ;;
      "--user" )
        echo "Warning: Declaring --user in \${{ templateVars["project_var_prefix"] }}_ARGS has been deprecated. Use \${{ templateVars["project_var_prefix"] }}_USER instead." 1>&2
        shift 1
        {{ templateVars["project_var_prefix"] }}_USER="$1"
        ;;
      * )
        {{ templateVars["project_var_prefix"] }}_ARGS="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS} $1"
        ;;
      esac
      shift 1
    done
  }
  parse_{{ templateVars["project_var_prefix"].lower() }}_args ${ORIG_{{ templateVars["project_var_prefix"] }}_ARGS}
fi

# Arguments to run the daemon with
{{ templateVars["project_var_prefix"] }}_ARGS="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS:-{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_BIN_FILE} --log {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_LOG_FILE} {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_OPTIONS}}"
START_STOP_DAEMON_ARGS="${START_STOP_DAEMON_ARGS}"

# Exit if the package is not installed
[ -x "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_RUBY}" ] || exit 0

# Source function library.
. /etc/init.d/functions

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Check the user
if [ -n "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_USER}" ]; then
  if ! getent passwd | grep -q "^{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_USER}:"; then
    echo "$0: user for running {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME} doesn't exist: {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_USER}" >&2
    exit 1
  fi
  mkdir -p "$(dirname "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}")"
  chown -R "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_USER}" "$(dirname "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}")"
  START_STOP_DAEMON_ARGS="${START_STOP_DAEMON_ARGS} --user {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_USER}"
fi

if [ -n "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_GROUP}" ]; then
  if ! getent group -s files | grep -q "^{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_GROUP}:"; then
    echo "$0: group for running {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME} doesn't exist: {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_GROUP}" >&2
    exit 1
  fi
  {{ templateVars["project_var_prefix"] }}_ARGS="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS} --group {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_GROUP}"
fi

if [ -n "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}" ]; then
  mkdir -p "$(dirname "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}")"
  chown -R "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_USER}" "$(dirname "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}")"
  {{ templateVars["project_var_prefix"] }}_ARGS="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS} --daemon {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"
fi

# 2012/04/17 Kazuki Ohta <k@treasure-data.com>
# Use jemalloc to avoid memory fragmentation
if [ -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_HOME}/lib/libjemalloc.so" ]; then
  export LD_PRELOAD="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_HOME}/lib/libjemalloc.so"
fi

kill_by_file() {
  local sig="$1"
  shift 1
  local pid="$(cat "$@" 2>/dev/null || true)"
  if [ -n "${pid}" ]; then
    if /bin/kill "${sig}" "${pid}" 1>/dev/null 2>&1; then
      return 0
    else
      return 2
    fi
  else
    return 1
  fi
}

#
# Function that starts the daemon/service
#
do_start() {
  # Set Max number of file descriptors for the safety sake
  # see http://docs.fluentd.org/en/articles/before-install
  ulimit -n 65536 1>/dev/null 2>&1 || true
  {{ templateVars["install_path"] }}/bin/pre-start.sh
  local RETVAL=0
  daemon --pidfile="{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}" ${START_STOP_DAEMON_ARGS} "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_RUBY}" {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS} || RETVAL="$?"
  [ $RETVAL -eq 0 ] && touch "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_LOCK_FILE}"
  {{ templateVars["install_path"] }}/bin/post-start.sh
  return $RETVAL
}

#
# Function that stops the daemon/service
#
do_stop() {
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  if [ -e "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}" ]; then
    # Use own process termination instead of killproc because killproc can't wait SIGTERM
    if kill_by_file -TERM "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"; then
      local i
      for i in $(seq "${STOPTIMEOUT}"); do
        if kill_by_file -0 "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"; then
          sleep 1
        else
          break
        fi
      done
      if kill_by_file -0 "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"; then
        echo -n "Timeout error occurred trying to stop {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}..."
        return 2
      else
        rm -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"
        rm -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_LOCK_FILE}"
      fi
    else
      return 1
    fi
  else
    if killproc "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PROG_NAME:-{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}}"; then
      rm -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"
      rm -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_LOCK_FILE}"
    else
      return 2
    fi
  fi
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  kill_by_file -HUP "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"
}

do_restart() {
  if ! do_configtest; then
    return 1
  fi
  local val=0
  do_stop || val="$?"
  case "${val}" in
  0 | 1 )
    if ! do_start; then
      return 1
    fi
    ;;
  * ) # Failed to stop
    return 1
    ;;
  esac
}

do_configtest() {
  eval "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_ARGS} ${START_STOP_DAEMON_ARGS} --dry-run -q"
}

RETVAL=0
case "$1" in
"start" )
  echo -n "Starting {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}: "
  do_start || RETVAL="$?"
  case "$RETVAL" in
  0 )
    log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    ;;
  * )
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    exit 1
    ;;
  esac
  ;;
"stop" )
  echo -n "Stopping {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}: "
  do_stop || RETVAL="$?"
  case "$RETVAL" in
  0 )
    log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    ;;
  * )
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    exit 1
    ;;
  esac
  ;;
"reload" )
  echo -n "Reloading {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}: "
  if ! do_configtest; then
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    exit 1
  fi
  if do_reload; then
    log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
  else
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    exit 1
  fi
  ;;
"restart" )
  echo -n "Restarting {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}: "
  if do_restart; then
    log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
  else
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    exit 1
  fi
  ;;
"status" )
  if kill_by_file -0 "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_PID_FILE}"; then
    log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME} is running"
  else
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME} is not running"
    exit 1
  fi
  ;;
"condrestart" )
  if [ -f "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_LOCK_FILE}" ]; then
    echo -n "Restarting {% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}: "
    if do_restart; then
      log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    else
      log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
      exit 1
    fi
  fi
  ;;
"configtest" )
  if do_configtest; then
    log_success_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
  else
    log_failure_msg "{% raw %}${{% endraw %}{{ templateVars["project_var_prefix"] }}_NAME}"
    exit 1
  fi
  ;;
* )
  echo "Usage: $0 {start|stop|reload|restart|condrestart|status|configtest}" >&2
  exit 1
  ;;
esac
